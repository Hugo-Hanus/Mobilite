@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery csrf
@functions{

    public string? GetAntiCsrfToken()
    {
        return csrf.GetAndStoreTokens(Context).RequestToken;
    }
}
<input type="hidden" id="RequestCsrfToken" name ="RequestCsrfToken" value="@GetAntiCsrfToken()"/>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
@{
Layout = "_Layout";  
ViewData["Title"] = "Statistiques";
@model List<Livraison>
}
<div class="container">
  <h1 class="display-4 me-4">Statistiques :</h1>
  <div>
  <canvas id="myChart" style="width:100%;max-width:600px"></canvas>
    
  </div>
  <div class="form mb-3">
    <form method="get" class="d-flex" asp-action="Statistique">
       <i class="bi-search h-100 mt-2 me-1"></i>
      <input type="text" class="form-control form-input" id="SearchString" name="SearchString" placeholder="Hubert,Gare" aria-label="Hubert,Gare" aria-describedby="recherche">
      <input type="submit" value="Recherche" class="btn btn-secondary w-25 form-input form-control"/>
    </form>
  </div>
  <div class="mb-5">
    <table class="table table-striped">
      <thead>
      <tr>
        <th id="client" class="btn-outline-dark colSort" scope="col">Client</th>
        <th id="date" class="btn-outline-dark colSort" scope="col">Date</th>
        <th id="chauffeur" class="btn-outline-dark colSort" scope="col">Chauffeur</th>
        <th id="etat" class="btn-outline-dark colSort" scope="col">Etat</th>
      </tr>
      </thead>
      <tbody id="listToComplete">
      </tbody>
    </table>
  </div>
</div>

@section ScriptStats{
  <script src="~/lib/jquery-ui-1.13.2/jquery-ui.js"></script>
  <script>
  
  class LivraisonModel{
    constructor({client,date,chauffeur,etat}={}) {
      this.client=client;
      this.date=date;
      this.chauffeur=chauffeur;
      this.etat=etat;
    }
    static compare({prop='name',isAsc=true}){
                 return (a,b)=> (isAsc ?b[prop].localeCompare(a[prop]):a[prop].localeCompare(b[prop]));
         }
  }
  let arrayLivraison = [
   @foreach (var livraison in Model)
   {@: new LivraisonModel({ client: "@livraison.ClientLivraison.UserName", date: "@livraison.DateDechargement", chauffeur: "@livraison.ChauffeurLivraison.Prenom @livraison.ChauffeurLivraison.Nom",etat:"@livraison.StatutLivraison" }),
   }
    ];
  let sortArray=arrayLivraison;
  let tbodyBalise=document.getElementById("listToComplete");
  let lastSort ={prop:'client',isAsc:true};
  makeList(sortArray);
  let token = $('#RequestCsrfToken').val();
  $("#SearchString").autocomplete({
    source: function(request, response) {
      $.ajax({
        url: '/Home/SearchList/',
        type: 'GET',
        data: { searchList: request.term },
        headers: { 'RequestVerificationToken': token },
        dataType: 'json',
        success: function(data) {
          response(data);
        }
      });
    }
  });
  
  document.querySelectorAll('th').forEach(col=>col.addEventListener("click",function (event){
   let sortCol={prop:col.id,isAsc:lastSort.isAsc};
   if(lastSort.prop===sortCol.prop){
           lastSort.isAsc = !lastSort.isAsc
       }else{
           lastSort={prop:sortCol.prop,isAsc:true};
    }
   sortArray=sortArray.sort(LivraisonModel.compare(lastSort));
   console.log(sortArray);
   makeList(sortArray);
  }
  ));
  
  function makeList(array){
    tbodyBalise.innerHTML='';
    array.forEach(livraison=>{
      let element = document.createElement("tr");
      let props = Object.keys(livraison);
      for (let row of props) {
        let rowBalise= document.createElement("td");
        rowBalise.textContent=livraison[row];
        element.appendChild(rowBalise);
      }
      tbodyBalise.appendChild(element);
      
    })
  }
</script>
  <script>
  var xValues = ["Italy", "France", "Spain", "USA", "Argentina"];
  var yValues = [55, 49, 44, 24, 15];
  var barColors = [
    "#b91d47",
    "#00aba9",
    "#2b5797",
    "#e8c3b9",
    "#1e7145"
  ];
  
  new Chart("myChart", {
    type: "pie",
    data: {
      labels: xValues,
      datasets: [{
        backgroundColor: barColors,
        data: yValues
      }]
    },
    options: {
      title: {
        display: true,
        text: "World Wide Wine Production 2018"
      }
    }
  });
  </script>
}